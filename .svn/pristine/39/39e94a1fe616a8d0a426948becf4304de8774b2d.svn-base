package org.event_factory.beans;

import java.io.IOException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

import org.event_manager.api.EventUtils;
import org.event_manager.events.Event;
import org.event_manager.events.Event.Emotion;
import org.event_manager.events.Event.Source;
import org.event_manager.native_events.TwitterEvent;
import org.message_manager.api.MessageClientAPI;
import org.message_manager.api.MessageClientAPI.Queue;
import org.message_manager.common.EventMessage;

public class EventCreator {

	MessageClientAPI messageClient = new MessageClientAPI();

	
	private Emotion getEmotionFromMessage(String message){
		Emotion emotion = Emotion.DontLike;
		
		if ( message.toLowerCase().contains("like") || message.toLowerCase().contains("love")){
			emotion = Emotion.Like;
		}
		
		return emotion;
	}
	
	public void handle(String message) {

		String[] params = message.split("\n");

		TwitterEvent event = new TwitterEvent();
		event.setHashtag(params[0]);
		try {
			event.setTweetDate(TwitterEvent.TWITTER_DATE_FORMAT
					.parse(params[1]));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		event.setUsername(params[2]);
		event.setUserId(Long.parseLong(params[3]));
		event.setSource(params[4]);
		event.setTweetId(Long.parseLong(params[5]));
		event.setLanguageCode(params[6]);
		event.setMessage(params[7]);

		if (event.getMessage().startsWith("RT")) {
			event.setRetweetUser(event.getMessage().substring(
					event.getMessage().indexOf("@") + 1,
					event.getMessage().indexOf(":")));
		}

		// Add message to persistence
		EventUtils.addTwitterEvent(event);

		// Convert to Event
		Event newEvent = new Event();
		newEvent.setAuthor(event.getUsername());
		newEvent.setDate(event.getTweetDate());
		newEvent.setMessage(event.getMessage());
		newEvent.setEmotion(getEmotionFromMessage(event.getMessage()));
		newEvent.setSource(Source.Twitter);
		newEvent.setTopic(event.getHashtag());

		// Check if this event affects the event context
		Event context = EventUtils.getEventContext(event.getUsername());

		
		if (context == null || !context.getEmotion().equals(newEvent.getEmotion())
				|| newEvent.getDate().compareTo(context.getDate()) > 0) {
			EventUtils.updateEventContext(newEvent);

			System.out.println("New Event- " + newEvent.toJson());

			// Send event
			try {
				messageClient.publish(newEvent);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else{
			//System.out.println("No Update");
		}
	}
}
