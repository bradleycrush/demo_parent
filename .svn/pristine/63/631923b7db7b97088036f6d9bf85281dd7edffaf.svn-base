package org.event_manager.api;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.event_manager.events.Component;
import org.event_manager.events.Event;
import org.event_manager.events.Event.Source;
import org.event_manager.native_events.TwitterEvent;

import com.mongodb.BasicDBObject;
import com.mongodb.BasicDBObjectBuilder;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;

public class EventUtils {

	public static final String DATABASE_EVENT_DEMO = "EventDemo";
	public static final String DATABASE_COLLECTION_EVENT_CONTEXT = "EventContext";
	public static final String DATABASE_COLLECTION_COMPONENT_CONTEXT = "ComponentContext";
	public static final String DATABASE_COLLECTION_EVENT = "Events";
	public static final String DATABASE_COLLECTION_COMPONENT = "Components";
	public static final String DATABASE_COLLECTION_TWITTER_EVENT = "TwitterEvents";

	public static void deleteCollection(String collection) {
		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);

		db.getCollection(collection).drop();
	}

	private static void addEvent(Event event, String collection) {
		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);

		BasicDBObject doc = event.toBasicDBObject();
		db.getCollection(collection).insert(doc);
	}
	
	private static void addComponent(Component component, String collection) {
		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);

		BasicDBObject doc = component.toBasicDBObject();
		db.getCollection(collection).insert(doc);
	}

	public static void addComponent(Component component){
		addComponent(component, DATABASE_COLLECTION_COMPONENT);
	}
	
	public static void addEvent(Event event) {
		addEvent(event, DATABASE_COLLECTION_EVENT);
	}
	
	public static void updateEventContext(Event event){
		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);

		BasicDBObject doc = event.toBasicDBObject();
		Event context = getEventContext(event.getAuthor());
		if (context != null){
			db.getCollection(DATABASE_COLLECTION_EVENT_CONTEXT).findAndModify(context.toBasicDBObject(),doc);
		} else{
			addEvent(event, DATABASE_COLLECTION_EVENT_CONTEXT);
		}
	}
	
	public static void updateComponentContext(Component component){
		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);

		BasicDBObject doc = component.toBasicDBObject();
		Event context = getEventContext(component.getTopic());
		if (context != null){
			db.getCollection(DATABASE_COLLECTION_COMPONENT_CONTEXT).findAndModify(context.toBasicDBObject(),doc);
		} else{
			addComponent(component, DATABASE_COLLECTION_EVENT_CONTEXT);
		}
	}

	public static Component getComponentContext(String source) {
		Component contextComponent = null;

		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);

		DBCollection coll = db
				.getCollection(DATABASE_COLLECTION_COMPONENT_CONTEXT);

		BasicDBObject query = new BasicDBObject();
		query.put("source", source);
		DBObject obj = coll.findOne(query);
		if (obj != null) {
			contextComponent = new Component(obj);
		}
		return contextComponent;
	}

	public static Event getEventContext(String author) {
		Event context = null;

		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);

		DBCollection coll = db.getCollection(DATABASE_COLLECTION_EVENT_CONTEXT);

		BasicDBObject query = new BasicDBObject();
		query.put("author", author);
		DBObject obj = coll.findOne(query);
		if (obj != null) {
			context = new Event(obj);
		}
		return context;
	}

	public static List<Event> getEventByAuthorAndSource(String author,
			Source source) {
		List<Event> events = new ArrayList<Event>();

		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);

		DBCollection coll = db.getCollection(DATABASE_COLLECTION_EVENT);

		BasicDBObject query = new BasicDBObject();
		query.put("author", author);
		query.put("source", source);
		DBCursor cursor2 = coll.find(query);
		// set index on a field

		try {
			while (cursor2.hasNext()) {
				DBObject obj = cursor2.next();
				events.add(new Event(obj));
			}
		} finally {
			cursor2.close();
		}
		return events;
	}

	public static List<TwitterEvent> getTwitterEventByUsername(String username) {
		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);
		List<TwitterEvent> events = new ArrayList<TwitterEvent>();

		DBCollection coll = db.getCollection(DATABASE_COLLECTION_TWITTER_EVENT);

		BasicDBObject query = new BasicDBObject();
		query.put("username", username);
		DBCursor cursor2 = coll.find(query);
		// set index on a field

		try {
			while (cursor2.hasNext()) {
				DBObject obj = cursor2.next();
				events.add(new TwitterEvent(obj));
			}
		} finally {
			cursor2.close();
		}
		return events;
	}

	// Get Native Event
	public static List<TwitterEvent> getTwitterEventByDate(Date startDate,
			Date endDate) {
		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);
		List<TwitterEvent> events = new ArrayList<TwitterEvent>();

		// BasicDBObject query = new BasicDBObject("tweetDate", );
		DBCollection coll = db.getCollection(DATABASE_COLLECTION_TWITTER_EVENT);
		BasicDBObject query = new BasicDBObject();
		query.put("tweetDate", BasicDBObjectBuilder.start("$gte", startDate)
				.add("$lte", endDate).get());
		DBCursor cursor2 = coll.find(query);
		// set index on a field

		try {
			while (cursor2.hasNext()) {
				DBObject obj = cursor2.next();
				TwitterEvent event = new TwitterEvent(obj);
				events.add(event);
			}
		} finally {
			cursor2.close();
		}
		return events;
	}

	public static void addTwitterEvent(TwitterEvent event) {
		MongoClient mongoClient = MongoClientInstance.getInstance();
		DB db = mongoClient.getDB(DATABASE_EVENT_DEMO);

		BasicDBObject doc = new BasicDBObject("hashtag", event.getHashtag())
				.append("tweetId", event.getTweetId())
				.append("tweetDate", event.getTweetDate())
				.append("username", event.getUsername())
				.append("userId", event.getUserId())
				.append("source", event.getSource())
				.append("languageCode", event.getLanguageCode())
				.append("message", event.getMessage())
				.append("retweetUser", event.getRetweetUser());
		db.getCollection(DATABASE_COLLECTION_TWITTER_EVENT).insert(doc);

	}
}
